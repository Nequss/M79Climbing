@using M79Climbing.Helpers
@model IEnumerable<M79Climbing.Models.Cap>

@{
    var name = ViewData["Name"] as string;
    var playerStats = ViewData["PlayerStats"] as M79Climbing.Models.PlayerStats;

    ViewData["Title"] = name;
}

<h1>@name</h1>

@if (playerStats != null)
{
    <div class="player-stats-container">
        <div class="row">
            <div class="col-md-6">
                <div class="player-stats-card">
                    <h4>Statistics</h4>
                    <p><strong>Total Caps:</strong> @ViewData["CapsCount"]</p>
                    <p><strong>Map Finishes:</strong> @playerStats.MapFinishes</p>
                    <p><strong>Respawns:</strong> @playerStats.Respawns</p>
                </div>
            </div>
            <div class="col-md-6">
                <div class="player-stats-card">
                    <h4>Other</h4>
                    <p><strong>Grenades Thrown:</strong> @playerStats.GrenadesThrown</p>
                    <p><strong>M79 Shots Fired:</strong> @playerStats.M79ShotsFired</p>
                    <p><strong>Time Spent on Server:</strong> @playerStats.TimeSpentOnServer.</p>
                </div>
            </div>
        </div>
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.First().Map)</th>
            <th>@Html.DisplayNameFor(model => model.First().Time)</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var cap in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => cap.Map)
                </td>
                <td>
                    @TimeHelper.ReturnTime(cap.Time)
                </td>
            </tr>
        }
    </tbody>
</table>
