@model M79Climbing.Models.ServerInfoModel

@{
    ViewData["Title"] = "Info";
}

<div class="container mt-5">
    <div class="card">
        <div class="card-body">
            <div class="grid-container">
                <div class="text-container">
                    <h1 class="title">@Model.Name</h1>
                    <p class="info">@Model.Info</p>
            </div>
                <div class="image-container">
                    <img src="~/images/m79climb2.png" alt="Join Now!" class="image">
                </div>
            </div>

            <hr class="divider">

            <!-- Rows -->
            <div class="grid-container">
              <div class="grid-colum-one">
                    <div class="info-item">
                        <strong>Current Map:</strong> @Model.CurrentMap
                    </div>
                    <div class="info-item">
                        <strong>Players:</strong> @Model.NumPlayers / @Model.MaxPlayers
                    </div>
                    <div class="info-item">
                        <strong>Max Players:</strong> @Model.MaxPlayers
                    </div>
                    <div class="info-item">
                        <strong>Version:</strong> @Model.Version
                    </div>
                    <div class="info-item">
                        <strong>Country:</strong> @Model.Country
                    </div>
                    <div class="info-item">
                        <strong>OS:</strong> @Model.OS
                    </div>
                    <div class="info-item">
                        <strong>IP:</strong> @Model.IP
                    </div>
                    <div class="info-item">
                        <strong>Port:</strong> @Model.Port
                    </div>
                    <div class="info-item">
                        <strong>Num Bots:</strong> @Model.NumBots
                    </div>
                    <div class="info-item">
                        <strong>Bonus Frequency:</strong> @Model.BonusFreq
                    </div>
              </div> 
               <div class="grid-colum-two">
                     <div class="info-item">
                      <strong>Respawn Time:</strong> @Model.Respawn
                    </div>
                    <div class="info-item">
                      <strong>Connection Type:</strong> @Model.ConnectionType
                    </div>
                    <div class="info-item">
                        <strong>Dedicated:</strong> @(Model.Dedicated ? "Yes" : "No")
                    </div>
                    <div class="info-item">
                        <strong>Realistic Mode:</strong> @(Model.Realistic ? "Yes" : "No")
                    </div>
                    <div class="info-item">
                        <strong>Private:</strong> @(Model.Private ? "Yes" : "No")
                    </div>
                    <div class="info-item">
                        <strong>Survival Mode:</strong> @(Model.Survival ? "Yes" : "No")
                    </div>
                    <div class="info-item">
                        <strong>Advanced Mode:</strong> @(Model.Advanced ? "Yes" : "No")
                    </div>
                    <div class="info-item">
                        <strong>Weapon Mod:</strong> @(Model.WM ? "Yes" : "No")
                    </div>
                    <div class="info-item">
                        <strong>Anti-Cheat:</strong> @(Model.AC ? "Yes" : "No")
                    </div>
                    <div class="info-item">
                        <strong>Game Style:</strong> @Model.GameStyle
                    </div>
                </div>
            </div>

            <hr class="divider">

            <div class="container mt-5">
                <div class="card">
                    <div class="card-body" style="margin-top: 20px;">
                        <h2 style="text-align: center;">Logs</h2>
                        <ul id="messagesList" style="max-height: 250px; overflow-y: scroll; list-style-type: none; padding: 0;">
                            <!-- New elements from websocket spawning there -->
                        </ul>
                    </div>
                </div>
            </div>

            <script>
                let socket;
                let isConnecting = false;

                function connectWebSocket() {
                    if (isConnecting) return;
                    isConnecting = true;

                    // ServerInfo is now a channel query parameter
                    // Use the correct WebSocket URL format
                    const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                    socket = new WebSocket(`${wsProtocol}//${window.location.host}/ServerInfo/WebSocketEndpoint`);

                    socket.onopen = function () {
                        console.log("Connected to WebSocket");
                        isConnecting = false;
                    };

                socket.onmessage = function (event) {
                    var messagesList = document.getElementById('messagesList');
                    var message = event.data;
                    var li = document.createElement('li');
                    li.style.display = 'flex';
                    li.style.justifyContent = 'space-between';
                    li.style.marginBottom = '5px';
                    li.style.marginLeft = '15px';

                    var messageSpan = document.createElement('span');
                    messageSpan.textContent = message;
                    messageSpan.style.textAlign = 'center'

                    var timeSpan = document.createElement('span');
                    var now = new Date();
                    timeSpan.textContent = now.toLocaleTimeString();
                    timeSpan.style.marginRight = '15px';
                    timeSpan.style.color = '#white';
                    timeSpan.style.textAlign = 'center'


                    li.appendChild(messageSpan);
                    li.appendChild(timeSpan);
                    messagesList.appendChild(li);

                    // Scroll to the latest message
                    //messagesList.scrollTop = messagesList.scrollHeight;
                };

                    socket.onerror = function (error) {
                        console.log("WebSocket error: " + error);
                        isConnecting = false;
                    };

                    socket.onclose = function (event) {
                        console.log("Disconnected from WebSocket");
                        isConnecting = false;

                        // Attempt to reconnect after a delay
                        setTimeout(connectWebSocket, 5000);
                    };
                }

                // Initial connection
                connectWebSocket();

                // Handle page visibility changes
                document.addEventListener('visibilitychange', function() {
                    if (document.visibilityState === 'visible') {
                        if (!socket || socket.readyState !== WebSocket.OPEN) {
                            connectWebSocket();
                        }
                    }
                });

                // Clean up on page unload
                window.addEventListener('beforeunload', function() {
                    if (socket && socket.readyState === WebSocket.OPEN) {
                        socket.close();
                    }
                });
            </script>

            <hr class="divider">

            <!-- Description Panel -->
            <div class="description-panel">
                <h3 class="description-title">Want to create your own server?</h3>
                <p class="description-text">
                    I'll make all content downloadable soon, also stay tuned for full detailed instructions!
                </p>
            </div>

            <!-- Buttons -->
            <div class="button-container">
                <a href="soldat://@Model.IP:@Model.Port" class="btn">Join Server</a>
                <a href="#" class="btn">Mappack</a>
                <a href="#" class="btn">Server.ini</a>
                <a href="#" class="btn">Weapons.ini</a>
                <a href="#" class="btn">Scripts</a>
            </div>
        </div>
    </div>
</div>